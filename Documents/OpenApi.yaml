---
swagger: "2.0"
info:
  description: Create a caffee machine api
  version: 1.0.0
  title: Caffe Machinee Api
host: virtserver.swaggerhub.com
basePath: /StefaniaVijulan/coffee-machine/1.0.0
tags:
- name: users
  description: Operations about user
- name: programs
  description: Programs that we will use
schemes:
- https
- http
paths:
  /users/register:
    post:
      tags:
      - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
      - users
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
      - users
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
      - application/xml
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{id}:
    put:
      tags:
      - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: id
        in: path
        description: The id of the user that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/xml
      - application/json
      parameters:
      - name: id
        in: path
        description: The id of the user that needs to be deleted
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /programs/create:
    post:
      tags:
      - programs
      summary: Add a new program for your coffee machine
      description: ""
      operationId: createProgram
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: The program that will be add to your coffee machine
        required: true
        schema:
          $ref: '#/definitions/Program'
      responses:
        "405":
          description: Invalid input
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      password:
        type: string
    xml:
      name: User
  Drink:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      sugar:
        type: number
      liquid:
        type: string
      temperature:
        type: number
    xml:
      name: Category
  Program:
    type: object
    properties:
      id:
        type: integer
        format: int64
      startingTime:
        type: string
      day:
        type: string
      drink:
        $ref: '#/definitions/Drink'
      user:
        $ref: '#/definitions/User'
    xml:
      name: Pet
